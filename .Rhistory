q()
library(MplusAutomation)
install.packages("MplusAutomaion")
createModels("C:/Users/SoYoung Kim/Desktop/Automation4SAS.txt")
library(MplusAutomation)
createModels("C:/Users/SoYoung Kim/Desktop/Automation4SAS.txt")
library(MplusAutomation)
vignette(MplusAutomatin)
vignette(MplusAutomation)
vignette("Vignette", package="MplusAutomation")
install.packages("C:/Users/SoYoung Kim/Desktop/XXM_statscamp_2020/R-and-RSTUDIO/DiagrammeR_0.8.2.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/SoYoung Kim/Desktop/XXM_statscamp_2020/xxm/xxm2.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/SoYoung Kim/Desktop/XXM_statscamp_2020/xxm/xxmWorkshop_0.2.0.zip", repos = NULL, type = "win.binary")
install.packages("htmlwidgets")
library(xxm2)
library(DiagrammeR)
install.packages("scales")
library(DiagrammeR)
install.packages("rstudioapi")
library(DiagrammeR)
install.packages("knitr")
library(DiagrammeR)
install.packages("visNetwork")
library(DiagrammeR)
library(xxmWorkshop)
data("achievement")
t <- tempfile("diagram")
# Setup
ys <- c("math1", "math2", "read1", "read2")
ach <- xxmModel(levels = c("student"))
#DATAA
xxmData(model = ach, level = c("student"),
data = achievement.student)
# VARIABLES
xxmYs(model = ach,  level = "student",
variables = ys, addMean = TRUE,
addCovariance = FALSE)
xxmEtas(model = ach, level = "student",
variables = c("M", "R"), addMean = FALSE,
addCovariance = T)
# Factor model for math
xxmFactor(model = ach,  from = "student.M",
to = c("student.math1", "student.math2"),
setScale = TRUE,  fixFL = 1,  fixLV = FALSE)
# Factor model for Reading
## Using xxmFactor
xxmFactor(model = ach,  from = "student.R",
to = c("student.read1", "student.read2"),
setScale = TRUE,  fixFL = 0,  fixLV = TRUE)
## Using xxmP
xxmP(ach,
from = "student.R",
to = c("student.read1", "student.read2"),
free=1,
value = 1,
label = c("r1","r2"))
# View model with labels:
xxmSetLabel(ach, "label")
xxmView(ach, t)
library(xxm2)
library(dplyr)
df1 <- data.frame(a=c(1:5), b=c(6:10))
df2 <- data.frame(a=c(11:15), b=c(16:20), c=LETTERS[1:5])
library(dplyr)
install.packages("dplyr")
library(dplyr)
df1
df2
bind_rows(df1, df2)
library(dplyr)
dplyr::bind_rows(df1,df2)
install.packages("data.table")
library(data.table)
data
head(rbindlist(data))
library(data.table)
rbindlist(data)
data = list()
N = 100000
for (n in 1:N) {
data[[n]] = data.frame(index=n,)
}
for (n in 1:N) {
data[[n]] = data.frame(index = n,
char = sample(letters, 1),
z = runif(1)) }
data[[1]]
data[[2]]
class(data)
str(data)
data[1]
library(plyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
rbind.fill(data)
library(dplyr)
install.packages("rstanarm")
.9/(.9+2.1)
library(lavan)
library(lavaan)
install.packages("lavaan")
library(lavaan)
library(MVN)
install.packages("MVN")
library(MVN)
install.packages("PAmodelPlot")
2019-1980
2019-1981
2019-1982
2020-1982
2021-1986
2021-1982
2022-1982
2022-1979
library(readxl)
dataset <- read_excel(NULL)
View(dataset)
library(readxl)
library(readxl)
Runnning <- read_excel("C:/Users/SoYoung Kim/Desktop/Runnning.xlsx")
View(Runnning)
grouping<- c("Diet", "Training", "Composite")
grouping
size <- tapply(times, method, length)
str(Runnning)
Runnning$method <- factor(Runnning$method)
str(Runnning)
size <- tapply(times, method, length)
size <- tapply(times, Runnning$method, length)
size <- tapply(Runnning$times, Runnning$method, length)
size
mean <- tapply(Runnning$times, Runnning$method, mean)
sd   <- tapply(Runnning$times, Runnning$method, sd)
mean
sd
descriptives <- data.frame(size, mean, sd)
descriptives
descriptives <- data.frame(group, size, mean, sd)
descriptives <- data.frame(grouping, size, mean, sd)
descriptives
descriptives <- data.frame(grouping, mean, sd, size)
descriptives
attach(Running)
attach(Runnning)
tapply(times, method, length)
tapply(times, method, mean)
tapply(times, method, sd)
aaa<-data.frame(tapply(times, method, length),
tapply(times, method, mean),
tapply(times, method, sd))
aaa
aaa
str(Runnning)
model1 <- aov(Runnning$times ~ Runnning$method, Runnning)
model1
summury(model1)
summary(model1)
model1$residuals
model1$model
model1$coefficients
list(model1)
list(model1)[[1]]
list(model1)[[2]]
list(model1)[1]
str(model1)
str(model1$qr)
str(model1$call)
install.packages("Rtools")
install.packages("Rtools")
library(Rtools)
install.packages("car")
install.packages("gee")
install.packages("ggplot2")
install.packages("lme4")
install.packages("lmtest")
install.packages("lsmeans")
install.packages("psych")
install.packages("sandwich")
install.packages("tidyverse")
library(sas7bdat)
OriginalData <-read.sas7bdat("ml_data_chap3.sas7bdat",debug=FALSE)
setwd()
setwd("C:/Users/SoYoung Kim/Downloads")
OriginalData <-read.sas7bdat("ml_data_chap3.sas7bdat",debug=FALSE)
####################
# Extract residual #
####################
library(lme4)
fm1 <- lmer (lninj ~ 1+ HIV_Region + ethnic + HIV_Region*ethnic
+ gender + gdmc_age + Edu_gp1 + Edu_gp2 + (ethnic | site),
OriginalData, REML=TRUE) # Analyze with the original data
Level2.resd <- ranef(fm1)$site # Extract level-2 residual
names(Level2.resd)<- c("u0", "u1")
Level2.resd$site <- as.numeric(row.names(Level2.resd))
Comp.resd <- as.numeric(resid(fm1)) # Extract composite residual
library(dplyr)
tmp <- full_join(OriginalData, Level2.resd, by="site")
tmp$u_j <- tmp$u0 + (tmp$u1*tmp$ethnic)
tmp$e_ij <- Comp.resd - tmp$u_j # Calculate level-1 residual
# matrix "S" is the empirical var/cov matrix
center_U <- Level2.resd
center_U$c_u0 <- Level2.resd$u0 - mean(Level2.resd$u0)
center_U$c_u1 <- Level2.resd$u1 - mean(Level2.resd$u1)
C_U <- center_U %>% select(c_u0, c_u1)
CU <- as.matrix(as.data.frame(lapply(C_U, as.numeric)))
SbyJ <- t(CU) %*% CU
J <- nrow (C_U)
S2 <- SbyJ/J
LS2 <- t(chol(S2))
# "Sigma" is the model estimated var/cov matrix
fm1tmp <- summary(fm1)
Sigma2 <- matrix(as.numeric(fm1tmp$varcor$site),2,byrow=T)
LSigma2 <- t(chol(Sigma2))
library(matlib)
A2 <- t(LSigma2%*%inv(LS2))
New_U <- CU%*%A2
tmp_U <- as.numeric(New_U)
New_U <- matrix(tmp_U,nrow(Level2.resd))
colnames(New_U) <- c("N_u0","N_u1")
# matrix "S" is the empirical var/cov matrix
tmp$c_eij <- tmp$e_ij - mean(tmp$e_ij)
C_E <- tmp %>% select(c_eij)
CE <- as.matrix(as.data.frame(lapply(C_E, as.numeric)))
SbyI <- t(CE) %*% CE
I <- nrow (C_E)
S1 <-SbyI/I
LS1 <- chol(S1)
# "Sigma" is the model estimated var/cov matrix
Sigma1 <- getME(fm1,"sigma")^2
LSigma1 <- chol(Sigma1)
A1 <- LSigma1/LS1
New_E <- CE%*%A1
# I = 9824; Sample size
# J = 20; Group size
G00_hat <- fixef(fm1)[1] # effect of Intercept  =  3.59552039
G01_hat <- fixef(fm1)[2] # effect of HIV_Region =  0.53096931
G10_hat <- fixef(fm1)[3] # effect of ethnic     = -0.54761327
G11_hat <- fixef(fm1)[8] # effect of HIV_Region:ethnic = 0.33108555
B2_hat <- fixef(fm1)[4] # effect of gender     = -0.04521547
B3_hat <- fixef(fm1)[5] # effect of gdmc_age   =  0.01395336
B4_hat <- fixef(fm1)[6] # effect of Edu_gp1    = -0.08517052
B5_hat <- fixef(fm1)[7] # effect of Edu_gp2    = -0.04973010
##################
# Bootstrap Loop #
##################
nboot <- 500
for(i in 1:nboot) {
SRS.E <- sample(New_E, I, replace=TRUE)
x <-sample(nrow(New_U),J,replace=T)
SRS.U <- New_U[x,]
fm1frame<-fm1@frame
level1Data<-fm1frame[,c('site', 'lninj', 'ethnic', 'gender', 'gdmc_age', 'Edu_gp1', 'Edu_gp2')]
level2Data<-fm1frame[!duplicated(fm1frame$site),c('site','HIV_Region')]
Newlevel1Data <- cbind(level1Data, SRS.E)
Newlevel2Data <- cbind(level2Data, SRS.U)
Newlevel2Data$New_alpha = G00_hat + G01_hat*Newlevel2Data$HIV_Region + Newlevel2Data$N_u0
Newlevel2Data$New_beta1 = G10_hat + G11_hat*Newlevel2Data$HIV_Region + Newlevel2Data$N_u1
BootstrapData <- merge(Newlevel1Data, Newlevel2Data, "site")
head(BootstrapData)
class(BootstrapData)
BootstrapData$New_y <- BootstrapData$New_alpha +
BootstrapData$New_beta1*BootstrapData$ethnic +
B2_hat*BootstrapData$gender +
B3_hat*BootstrapData$gdmc_age +
B4_hat*BootstrapData$Edu_gp1 +
B5_hat*BootstrapData$Edu_gp2 +
BootstrapData$SRS.E
doboot <- lmer (New_y ~ 1+ HIV_Region + ethnic + HIV_Region*ethnic +
gender + gdmc_age + Edu_gp1 + Edu_gp2 + (ethnic | site),
BootstrapData, REML=TRUE)
smr.doboot <- summary(doboot)
Reg.coef <- fixef(doboot)
u_11 <- smr.doboot$varcor$site[1]
u_21 <- smr.doboot$varcor$site[3]
u_22 <- smr.doboot$varcor$site[4]
sigma.sqr <- smr.doboot$sigma^2
Resd_Cov <- c(u_11,u_21,u_22,sigma.sqr)
names(Resd_Cov) <- c("u_11","u_21","u_22","sigma.sqr")
if (doboot@beta[1] == summary(doboot)$coefficient[1]) {
Fixed_p <- as.data.frame( t(data.frame(Reg.coef)) )
Random_p <- as.data.frame( t(data.frame(Resd_Cov)) )
if (i==1) {
fixed_effects <- Fixed_p
}  else {
fixed_effects <- bind_rows (fixed_effects, Fixed_p)}
if (i==1) {
random_effects<-Random_p
}  else {
random_effects <- bind_rows(random_effects, Random_p)}
}
}
Est.fixed <- c(
mean(fixed_effects$`(Intercept)`),
mean(fixed_effects$HIV_Region),
mean(fixed_effects$ethnic),
mean(fixed_effects$gender),
mean(fixed_effects$gdmc_age),
mean(fixed_effects$Edu_gp1),
mean(fixed_effects$Edu_gp2),
mean(fixed_effects$`HIV_Region:ethnic`)
)
names(Est.fixed) <- names(fixed_effects)
boot_fixed <- data.frame(Est.fixed)
Est.random <- c(
mean(random_effects$u_11),
mean(random_effects$u_21),
mean(random_effects$u_22),
mean(random_effects$sigma.sqr)
)
names(Est.random) <- names(random_effects)
boot_random <- data.frame(Est.random)
boot_fixed
boot_random
setwd("C:/Users/SoYoung Kim/Downloads/test1")
